%description:

This test shows how the LifecycleController should be used to manage the
turned on/off state of network nodes. The nodes in the test network contain
three submodules: a test protocol, a test radio and a test mobility. The Nodes
can be turned on/off using the TurnNodeOnOperation or the TurnNodeOffOperation.
Other operations could be implemented similarly for nodes, interfaces or links. 

The startup and shutting process of the individual submodules takes time and
some operation phases may depend on some other. This is implemented by splitting
up the operations into more zero simulation time duration stages. Each submodule
provides its own code that runs concurrently in the predefined stages of the
given operation. The time it takes to run a specific stage for a specific submodule
may be different. The LifecycleContoller will figure out the total time to properly
run each stage one after the other.

%file: test.ned

import inet.base.LifecycleController;
import inet.status.NodeStatus;
import inet.world.scenario.ScenarioManager;

network Test
{
    parameters:
        **.initialStatus = default("off");
    submodules:
        lifecycleController: LifecycleController {
            @display("p=50,100");
        }
        scenarioManager: ScenarioManager {
            script = xmldoc("scenario.xml");
            @display("p=50,50");
        }
        nodeA: TestNode;
        nodeB: TestNode;
}

%file: scenario.xml

<scenario>
    <at t="10.0">
        <tell module="lifecycleController" target="nodeA" operation="TestTurnNodeOnOperation"/>
    </at>
    <at t="20.0">
        <tell module="lifecycleController" target="nodeB" operation="TestTurnNodeOnOperation"/>
    </at>
    <at t="30.0">
        <tell module="lifecycleController" target="nodeB" operation="TestTurnNodeOffOperation"/>
    </at>
    <at t="40.0">
        <tell module="lifecycleController" target="nodeA" operation="TestTurnNodeOffOperation"/>
    </at>
</scenario>

%inifile: omnetpp.ini

[General]
network = Test
tkenv-plugin-path = ../../../etc/plugins
ned-path = .;../../../../src;../../lib
cmdenv-express-mode = false

%contains: stdout
processing <at> command...
processing <tell> command...
Test.nodeA turning on
Test.nodeA.mobility starting to move
Test.nodeA.radio turning on transmitter
** Event #2  T=11   Test.nodeA.radio (TestRadio, id=9)
Test.nodeA.radio transmitter turned on
Test.nodeA.protocol opening connection
Test.nodeA.radio turning on receiver
** Event #3  T=13   Test.nodeA.radio (TestRadio, id=9)
Test.nodeA.radio receiver turned on
** Event #4  T=14   Test.nodeA.protocol (TestProtocol, id=8)
Test.nodeA.protocol connection open
Test.nodeA.protocol sending initial data
** Event #5  T=16   Test.nodeA.protocol (TestProtocol, id=8)
Test.nodeA.protocol data sent
** Event #6  T=19   Test.nodeA.mobility (TestMobility, id=7)
Test.nodeA.mobility moving started
Test.nodeA turned on
** Event #7  T=20   Test.scenarioManager (ScenarioManager, id=3)
processing <at> command...
processing <tell> command...
Test.nodeB turning on
Test.nodeB.mobility starting to move
Test.nodeB.radio turning on transmitter
** Event #8  T=21   Test.nodeB.radio (TestRadio, id=13)
Test.nodeB.radio transmitter turned on
Test.nodeB.protocol opening connection
Test.nodeB.radio turning on receiver
** Event #9  T=23   Test.nodeB.radio (TestRadio, id=13)
Test.nodeB.radio receiver turned on
** Event #10  T=24   Test.nodeB.protocol (TestProtocol, id=12)
Test.nodeB.protocol connection open
Test.nodeB.protocol sending initial data
** Event #11  T=26   Test.nodeB.protocol (TestProtocol, id=12)
Test.nodeB.protocol data sent
** Event #12  T=29   Test.nodeB.mobility (TestMobility, id=11)
Test.nodeB.mobility moving started
Test.nodeB turned on
** Event #13  T=30   Test.scenarioManager (ScenarioManager, id=3)
processing <at> command...
processing <tell> command...
Test.nodeB turning off
Test.nodeB.mobility stopping to move
Test.nodeB.protocol sending final data
** Event #14  T=32   Test.nodeB.protocol (TestProtocol, id=12)
Test.nodeB.protocol data sent
Test.nodeB.protocol closing connection
Test.nodeB.radio turning off receiver
** Event #15  T=34   Test.nodeB.radio (TestRadio, id=13)
Test.nodeB.radio receiver turned off
** Event #16  T=35   Test.nodeB.protocol (TestProtocol, id=12)
Test.nodeB.protocol connection closed
Test.nodeB.radio turning off transmitter
** Event #17  T=36   Test.nodeB.radio (TestRadio, id=13)
Test.nodeB.radio transmitter turned off
** Event #18  T=39   Test.nodeB.mobility (TestMobility, id=11)
Test.nodeB.mobility moving stopped
Test.nodeB turned off
** Event #19  T=40   Test.scenarioManager (ScenarioManager, id=3)
processing <at> command...
processing <tell> command...
Test.nodeA turning off
Test.nodeA.mobility stopping to move
Test.nodeA.protocol sending final data
** Event #20  T=42   Test.nodeA.protocol (TestProtocol, id=8)
Test.nodeA.protocol data sent
Test.nodeA.protocol closing connection
Test.nodeA.radio turning off receiver
** Event #21  T=44   Test.nodeA.radio (TestRadio, id=9)
Test.nodeA.radio receiver turned off
** Event #22  T=45   Test.nodeA.protocol (TestProtocol, id=8)
Test.nodeA.protocol connection closed
Test.nodeA.radio turning off transmitter
** Event #23  T=46   Test.nodeA.radio (TestRadio, id=9)
Test.nodeA.radio transmitter turned off
** Event #24  T=49   Test.nodeA.mobility (TestMobility, id=7)
Test.nodeA.mobility moving stopped
Test.nodeA turned off
