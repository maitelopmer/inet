/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : InterfaceStatus.sm
 */

#include "InterfaceStatus.h"
#include "InterfaceStatus_sm.h"

using namespace statemap;

// Static class declarations.
InterfaceStatusMap_Up InterfaceStatusMap::Up("InterfaceStatusMap::Up", 0);
InterfaceStatusMap_BringingDown InterfaceStatusMap::BringingDown("InterfaceStatusMap::BringingDown", 1);
InterfaceStatusMap_Down InterfaceStatusMap::Down("InterfaceStatusMap::Down", 2);
InterfaceStatusMap_BringingUp InterfaceStatusMap::BringingUp("InterfaceStatusMap::BringingUp", 3);

void InterfaceStatusDataState::EndBringingDown(InterfaceStatusContext& context)
{
    Default(context);
    return;
}

void InterfaceStatusDataState::EndBringingUp(InterfaceStatusContext& context)
{
    Default(context);
    return;
}

void InterfaceStatusDataState::StartBringingDown(InterfaceStatusContext& context)
{
    Default(context);
    return;
}

void InterfaceStatusDataState::StartBringingUp(InterfaceStatusContext& context)
{
    Default(context);
    return;
}

void InterfaceStatusDataState::Default(InterfaceStatusContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void InterfaceStatusMap_Up::StartBringingDown(InterfaceStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(InterfaceStatusMap::BringingDown);
    (context.getState()).Entry(context);

    return;
}

void InterfaceStatusMap_BringingDown::EndBringingDown(InterfaceStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(InterfaceStatusMap::Down);
    (context.getState()).Entry(context);

    return;
}

void InterfaceStatusMap_Down::StartBringingUp(InterfaceStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(InterfaceStatusMap::BringingUp);
    (context.getState()).Entry(context);

    return;
}

void InterfaceStatusMap_BringingUp::EndBringingUp(InterfaceStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(InterfaceStatusMap::Up);
    (context.getState()).Entry(context);

    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
