/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NodeStatus.sm
 */

#include "NodeStatus.h"
#include "NodeStatus_sm.h"

using namespace statemap;

// Static class declarations.
NodeStatusMap_On NodeStatusMap::On("NodeStatusMap::On", 0);
NodeStatusMap_TurningOff NodeStatusMap::TurningOff("NodeStatusMap::TurningOff", 1);
NodeStatusMap_Off NodeStatusMap::Off("NodeStatusMap::Off", 2);
NodeStatusMap_TurningOn NodeStatusMap::TurningOn("NodeStatusMap::TurningOn", 3);

void NodeStatusDataState::EndTurningOff(NodeStatusContext& context)
{
    Default(context);
    return;
}

void NodeStatusDataState::EndTurningOn(NodeStatusContext& context)
{
    Default(context);
    return;
}

void NodeStatusDataState::StartTurningOff(NodeStatusContext& context)
{
    Default(context);
    return;
}

void NodeStatusDataState::StartTurningOn(NodeStatusContext& context)
{
    Default(context);
    return;
}

void NodeStatusDataState::Default(NodeStatusContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void NodeStatusMap_On::StartTurningOff(NodeStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(NodeStatusMap::TurningOff);
    (context.getState()).Entry(context);

    return;
}

void NodeStatusMap_TurningOff::EndTurningOff(NodeStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(NodeStatusMap::Off);
    (context.getState()).Entry(context);

    return;
}

void NodeStatusMap_Off::StartTurningOn(NodeStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(NodeStatusMap::TurningOn);
    (context.getState()).Entry(context);

    return;
}

void NodeStatusMap_TurningOn::EndTurningOn(NodeStatusContext& context)
{

    (context.getState()).Exit(context);
    context.setState(NodeStatusMap::On);
    (context.getState()).Entry(context);

    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
