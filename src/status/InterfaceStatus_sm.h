/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : InterfaceStatus.sm
 */

#ifndef _H_INTERFACESTATUS_SM
#define _H_INTERFACESTATUS_SM


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class InterfaceStatusMap;
class InterfaceStatusMap_Up;
class InterfaceStatusMap_BringingDown;
class InterfaceStatusMap_Down;
class InterfaceStatusMap_BringingUp;
class InterfaceStatusMap_Default;
class InterfaceStatusDataState;
class InterfaceStatusContext;
class InterfaceStatusData;

class InterfaceStatusDataState :
    public statemap::State
{
public:

    InterfaceStatusDataState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    bool operator==(const InterfaceStatusDataState& other)
    {
        return _stateId == other._stateId;
    }

    bool operator!=(const InterfaceStatusDataState& other)
    {
        return _stateId != other._stateId;
    }

    virtual void Entry(InterfaceStatusContext&) {};
    virtual void Exit(InterfaceStatusContext&) {};

    virtual void EndBringingDown(InterfaceStatusContext& context);
    virtual void EndBringingUp(InterfaceStatusContext& context);
    virtual void StartBringingDown(InterfaceStatusContext& context);
    virtual void StartBringingUp(InterfaceStatusContext& context);

protected:

    virtual void Default(InterfaceStatusContext& context);
};

class InterfaceStatusMap
{
public:

    static InterfaceStatusMap_Up Up;
    static InterfaceStatusMap_BringingDown BringingDown;
    static InterfaceStatusMap_Down Down;
    static InterfaceStatusMap_BringingUp BringingUp;
};

class InterfaceStatusMap_Default :
    public InterfaceStatusDataState
{
public:

    InterfaceStatusMap_Default(const char *name, int stateId)
    : InterfaceStatusDataState(name, stateId)
    {};

};

class InterfaceStatusMap_Up :
    public InterfaceStatusMap_Default
{
public:
    InterfaceStatusMap_Up(const char *name, int stateId)
    : InterfaceStatusMap_Default(name, stateId)
    {};

    void StartBringingDown(InterfaceStatusContext& context);
};

class InterfaceStatusMap_BringingDown :
    public InterfaceStatusMap_Default
{
public:
    InterfaceStatusMap_BringingDown(const char *name, int stateId)
    : InterfaceStatusMap_Default(name, stateId)
    {};

    void EndBringingDown(InterfaceStatusContext& context);
};

class InterfaceStatusMap_Down :
    public InterfaceStatusMap_Default
{
public:
    InterfaceStatusMap_Down(const char *name, int stateId)
    : InterfaceStatusMap_Default(name, stateId)
    {};

    void StartBringingUp(InterfaceStatusContext& context);
};

class InterfaceStatusMap_BringingUp :
    public InterfaceStatusMap_Default
{
public:
    InterfaceStatusMap_BringingUp(const char *name, int stateId)
    : InterfaceStatusMap_Default(name, stateId)
    {};

    void EndBringingUp(InterfaceStatusContext& context);
};

class InterfaceStatusContext :
    public statemap::FSMContext
{
public:

    InterfaceStatusContext(InterfaceStatusData& owner)
    : FSMContext(InterfaceStatusMap::Up),
      _owner(owner)
    {};

    InterfaceStatusContext(InterfaceStatusData& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    InterfaceStatusData& getOwner() const
    {
        return (_owner);
    };

    InterfaceStatusDataState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<InterfaceStatusDataState&>(*_state));
    };

    void EndBringingDown()
    {
        (getState()).EndBringingDown(*this);
    };

    void EndBringingUp()
    {
        (getState()).EndBringingUp(*this);
    };

    void StartBringingDown()
    {
        (getState()).StartBringingDown(*this);
    };

    void StartBringingUp()
    {
        (getState()).StartBringingUp(*this);
    };

private:

    InterfaceStatusData& _owner;
};


#endif // _H_INTERFACESTATUS_SM

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
