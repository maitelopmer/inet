/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : NodeStatus.sm
 */

#ifndef _H_NODESTATUS_SM
#define _H_NODESTATUS_SM


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class NodeStatusMap;
class NodeStatusMap_On;
class NodeStatusMap_TurningOff;
class NodeStatusMap_Off;
class NodeStatusMap_TurningOn;
class NodeStatusMap_Default;
class NodeStatusDataState;
class NodeStatusContext;
class NodeStatusData;

class NodeStatusDataState :
    public statemap::State
{
public:

    NodeStatusDataState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    bool operator==(const NodeStatusDataState& other)
    {
        return _stateId == other._stateId;
    }

    bool operator!=(const NodeStatusDataState& other)
    {
        return _stateId != other._stateId;
    }

    virtual void Entry(NodeStatusContext&) {};
    virtual void Exit(NodeStatusContext&) {};

    virtual void EndTurningOff(NodeStatusContext& context);
    virtual void EndTurningOn(NodeStatusContext& context);
    virtual void StartTurningOff(NodeStatusContext& context);
    virtual void StartTurningOn(NodeStatusContext& context);

protected:

    virtual void Default(NodeStatusContext& context);
};

class NodeStatusMap
{
public:

    static NodeStatusMap_On On;
    static NodeStatusMap_TurningOff TurningOff;
    static NodeStatusMap_Off Off;
    static NodeStatusMap_TurningOn TurningOn;
};

class NodeStatusMap_Default :
    public NodeStatusDataState
{
public:

    NodeStatusMap_Default(const char *name, int stateId)
    : NodeStatusDataState(name, stateId)
    {};

};

class NodeStatusMap_On :
    public NodeStatusMap_Default
{
public:
    NodeStatusMap_On(const char *name, int stateId)
    : NodeStatusMap_Default(name, stateId)
    {};

    void StartTurningOff(NodeStatusContext& context);
};

class NodeStatusMap_TurningOff :
    public NodeStatusMap_Default
{
public:
    NodeStatusMap_TurningOff(const char *name, int stateId)
    : NodeStatusMap_Default(name, stateId)
    {};

    void EndTurningOff(NodeStatusContext& context);
};

class NodeStatusMap_Off :
    public NodeStatusMap_Default
{
public:
    NodeStatusMap_Off(const char *name, int stateId)
    : NodeStatusMap_Default(name, stateId)
    {};

    void StartTurningOn(NodeStatusContext& context);
};

class NodeStatusMap_TurningOn :
    public NodeStatusMap_Default
{
public:
    NodeStatusMap_TurningOn(const char *name, int stateId)
    : NodeStatusMap_Default(name, stateId)
    {};

    void EndTurningOn(NodeStatusContext& context);
};

class NodeStatusContext :
    public statemap::FSMContext
{
public:

    NodeStatusContext(NodeStatusData& owner)
    : FSMContext(NodeStatusMap::On),
      _owner(owner)
    {};

    NodeStatusContext(NodeStatusData& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    NodeStatusData& getOwner() const
    {
        return (_owner);
    };

    NodeStatusDataState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<NodeStatusDataState&>(*_state));
    };

    void EndTurningOff()
    {
        (getState()).EndTurningOff(*this);
    };

    void EndTurningOn()
    {
        (getState()).EndTurningOn(*this);
    };

    void StartTurningOff()
    {
        (getState()).StartTurningOff(*this);
    };

    void StartTurningOn()
    {
        (getState()).StartTurningOn(*this);
    };

private:

    NodeStatusData& _owner;
};


#endif // _H_NODESTATUS_SM

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
