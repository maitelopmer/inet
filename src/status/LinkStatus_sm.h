/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : LinkStatus.sm
 */

#ifndef _H_LINKSTATUS_SM
#define _H_LINKSTATUS_SM


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class LinkStatusMap;
class LinkStatusMap_PluggedIn;
class LinkStatusMap_Unplugging;
class LinkStatusMap_Unplugged;
class LinkStatusMap_PluggingIn;
class LinkStatusMap_Default;
class LinkStatusDataState;
class LinkStatusContext;
class LinkStatusData;

class LinkStatusDataState :
    public statemap::State
{
public:

    LinkStatusDataState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    bool operator==(const LinkStatusDataState& other)
    {
        return _stateId == other._stateId;
    }

    bool operator!=(const LinkStatusDataState& other)
    {
        return _stateId != other._stateId;
    }

    virtual void Entry(LinkStatusContext&) {};
    virtual void Exit(LinkStatusContext&) {};

    virtual void EndPluggingIn(LinkStatusContext& context);
    virtual void EndUnplugging(LinkStatusContext& context);
    virtual void StartPluggingIn(LinkStatusContext& context);
    virtual void StartUnplugging(LinkStatusContext& context);

protected:

    virtual void Default(LinkStatusContext& context);
};

class LinkStatusMap
{
public:

    static LinkStatusMap_PluggedIn PluggedIn;
    static LinkStatusMap_Unplugging Unplugging;
    static LinkStatusMap_Unplugged Unplugged;
    static LinkStatusMap_PluggingIn PluggingIn;
};

class LinkStatusMap_Default :
    public LinkStatusDataState
{
public:

    LinkStatusMap_Default(const char *name, int stateId)
    : LinkStatusDataState(name, stateId)
    {};

};

class LinkStatusMap_PluggedIn :
    public LinkStatusMap_Default
{
public:
    LinkStatusMap_PluggedIn(const char *name, int stateId)
    : LinkStatusMap_Default(name, stateId)
    {};

    void StartUnplugging(LinkStatusContext& context);
};

class LinkStatusMap_Unplugging :
    public LinkStatusMap_Default
{
public:
    LinkStatusMap_Unplugging(const char *name, int stateId)
    : LinkStatusMap_Default(name, stateId)
    {};

    void EndUnplugging(LinkStatusContext& context);
};

class LinkStatusMap_Unplugged :
    public LinkStatusMap_Default
{
public:
    LinkStatusMap_Unplugged(const char *name, int stateId)
    : LinkStatusMap_Default(name, stateId)
    {};

    void StartPluggingIn(LinkStatusContext& context);
};

class LinkStatusMap_PluggingIn :
    public LinkStatusMap_Default
{
public:
    LinkStatusMap_PluggingIn(const char *name, int stateId)
    : LinkStatusMap_Default(name, stateId)
    {};

    void EndPluggingIn(LinkStatusContext& context);
};

class LinkStatusContext :
    public statemap::FSMContext
{
public:

    LinkStatusContext(LinkStatusData& owner)
    : FSMContext(LinkStatusMap::PluggedIn),
      _owner(owner)
    {};

    LinkStatusContext(LinkStatusData& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    LinkStatusData& getOwner() const
    {
        return (_owner);
    };

    LinkStatusDataState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<LinkStatusDataState&>(*_state));
    };

    void EndPluggingIn()
    {
        (getState()).EndPluggingIn(*this);
    };

    void EndUnplugging()
    {
        (getState()).EndUnplugging(*this);
    };

    void StartPluggingIn()
    {
        (getState()).StartPluggingIn(*this);
    };

    void StartUnplugging()
    {
        (getState()).StartUnplugging(*this);
    };

private:

    LinkStatusData& _owner;
};


#endif // _H_LINKSTATUS_SM

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
